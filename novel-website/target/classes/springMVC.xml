<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描包 -->
    <context:component-scan base-package="com.yrw.mvc"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
       处理静态资源，例如html、js、css、jpg
      若只设置该标签，则只能访问静态资源，其他请求则无法访问
      此时必须设置<mvc:annotation-driven/>解决问题
     -->
    <mvc:default-servlet-handler/>

    <!-- 开启mvc注解驱动 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--
    path：设置处理的请求地址
    view-name：设置请求地址所对应的视图名称
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：-->
    <!--java对象转为json-->
    <!--静态资源-->
    <mvc:annotation-driven />

    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

<!--    <mvc:interceptors>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--        <ref bean="secondInterceptor"></ref>-->
<!--        &lt;!&ndash;    <bean class="com.yrw.mvc.interceptors.FirstInterceptor"></bean>&ndash;&gt;-->
<!--        &lt;!&ndash;    <ref bean="firstInterceptor"></ref>&ndash;&gt;-->
<!--        &lt;!&ndash;    &lt;!&ndash; 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 &ndash;&gt;&ndash;&gt;-->
<!--        &lt;!&ndash;    <mvc:interceptor>&ndash;&gt;-->
<!--        &lt;!&ndash;        <mvc:mapping path="/**"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        <mvc:exclude-mapping path="/"/>&ndash;&gt;-->
<!--        &lt;!&ndash;        <ref bean="firstInterceptor"></ref>&ndash;&gt;-->
<!--        &lt;!&ndash;    </mvc:interceptor>&ndash;&gt;-->
<!--        &lt;!&ndash;    &lt;!&ndash;&ndash;&gt;-->
<!--        &lt;!&ndash;        以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求&ndash;&gt;-->
<!--        &lt;!&ndash;    &ndash;&gt;&ndash;&gt;-->
<!--        &lt;!&ndash;        &ndash;&gt;&ndash;&gt;-->
<!--    </mvc:interceptors>-->

    <!--    &lt;!&ndash;配置异常文件&ndash;&gt;-->
    <!--        <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
    <!--        <property name="exceptionMappings">-->
    <!--            <props>-->
    <!--                &lt;!&ndash;-->
    <!--                    properties的键表示处理器方法执行过程中出现的异常-->
    <!--                    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面-->
    <!--                &ndash;&gt;-->
    <!--                <prop key="java.lang.ArithmeticException">error</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;-->
    <!--            exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享-->
    <!--        &ndash;&gt;-->
    <!--        <property name="exceptionAttribute" value="ex"></property>-->
    <!--    </bean>-->


</beans>